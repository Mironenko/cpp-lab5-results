#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <sstream>

using namespace std;

class Directory;
class File;
class Label;

class FileItem
{
protected:
	string _name;
	Directory* _parent; 
	static void set_parent(Directory* parent, FileItem* child) { child->_parent = parent; }
public:
	FileItem(string name) : _name(name) { }
	string getName() const { return _name; }
	Directory* get_parent() const { return _parent; }
	void getFullName(vector<string>& fullname) const;
	virtual void remove() = 0;
	virtual ~FileItem() = 0; 
};

FileItem::~FileItem() { }
void FileItem::remove() { }

class Directory : public FileItem
{
private:
	vector<File*> _files;
	vector<Directory*> _directories;
	vector<Label*> _labels;
public:
	Directory(string name) : FileItem(name) { }
	void addFile(File* file);
	void addDirectory(Directory* directory);
	void addLabel(Label* label);
	vector<File*> listOfFiles() const { return _files; };
	vector<Directory*> listOfDirectories() const { return _directories; };
	vector<Label*> listOfLabels() const { return _labels; };
	Directory* findDirectory(string name) const;
	File* findFile(string name) const;
	Label* findLabel(string name) const;
	void openFile(string name) const;
	void viewFile(string name) const;
	void printNames() const;
	void removeFile(string name);
	void removeLabel(string name);
	void removeDirectory(string name);
	void remove();
	~Directory();
};

void FileItem::getFullName(vector<string>& fullname) const
{
	fullname.insert(fullname.begin(), _name);
	if (_parent)
		_parent->getFullName(fullname);
}

class File : public FileItem
{
private:
	vector<string> _data;
	bool _isOpened;
public:
	File(string name) : FileItem(name) { _isOpened = false; }
	void Write();
	void Open();
	void Close() { _isOpened = false; }
	void View() const;
	bool IsOpened() const { return _isOpened; }
	void remove() { _data.clear(); _parent->removeFile(_name); }
	~File() { _data.clear(); }
};

class Label: public FileItem
{
private:
	FileItem* _item;
public:
	Label(string name) : FileItem(name), _item(nullptr) { }
	void addReference(FileItem* item);
	void remove() { _parent->removeLabel(_name); }
	~Label() { }
};

class FileManager
{
private:
	Directory* _root;
	bool _isAdmin;
	Directory* _current;
public:
	FileManager(string name = "Root") { _root = new Directory(name + ':'); _current = _root; }
	FileItem* findItem(vector<string> names, Directory* root, int counter = 0);
	void showTree(Directory* root, int counter = 0);
	void remove_r(string fullname, Directory* root);
	void setRights(bool admin) { _isAdmin = admin; }
	bool getRights() const { return _isAdmin; }
	void changeDirectory(string fullname);
	void makeDirectory(string fullname) const;
	void makeFile(string fullname) const;
	void makeLabel(string nameOfLabel, string fullNameOfRef);
	void list() const;
	void dump();
	Directory* getCurrentDirectory() const { return _current; }
	void showFullName() const;
	~FileManager() { delete _root; }
};

vector<string> &split(const string &s, char delim, vector<string> &elems);
vector<string> split(const string &s, char delim);
vector<string> ParsePath(string fullname);

void Directory::addFile(File * file)
{
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == file->getName())
			throw runtime_error("Item with this name is already exist");
	}
	for (int i = 0; i < _directories.size(); i++)
	{
		if (_directories[i]->_name == file->getName())
			throw runtime_error("Item with this name is already exist");
	}
	for (int i = 0; i < _labels.size(); i++)
	{
		if (_labels[i]->getName() == file->getName())
			throw runtime_error("Item with this name is already exist");
	}
	_files.push_back(file);
	set_parent(this, file);
}

void Directory::addDirectory(Directory * directory)
{
	for (int i = 0; i < _directories.size(); i++)
	{
		if (_directories[i]->_name == directory->getName())
			throw runtime_error("Item with this name is already exist");
	}
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == directory->getName())
			throw runtime_error("Item with this name is already exist");
	}
	for (int i = 0; i < _labels.size(); i++)
	{
		if (_labels[i]->getName() == directory->getName())
			throw runtime_error("Item with this name is already exist");
	}
	_directories.push_back(directory);
	directory->_parent = this;
}

void Directory::addLabel(Label * label)
{
	for (int i = 0; i < _labels.size(); i++)
	{
		if (_labels[i]->getName() == label->getName())
			throw runtime_error("Item with this name is already exist");
	}
	for (int i = 0; i < _directories.size(); i++)
	{
		if (_directories[i]->_name == label->getName())
			throw runtime_error("Item with this name is already exist");
	}
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == label->getName())
			throw runtime_error("Item with this name is already exist");
	}
	_labels.push_back(label);
	set_parent(this, label);
}

Directory* Directory::findDirectory(string name) const
{
	for (int i = 0; i < _directories.size(); i++)
	{
		if (_directories[i]->_name == name)
			return _directories[i];
	}
	throw runtime_error("Directory is not found");
}

File* Directory::findFile(string name) const
{
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == name)
			return _files[i];
	}
	throw runtime_error("File is not found");
}

Label * Directory::findLabel(string name) const
{
	for (int i = 0; i < _labels.size(); i++)
	{
		if (_labels[i]->getName() == name)
			return _labels[i];
	}
	throw runtime_error("Label is not found");
}

void Directory::openFile(string name) const
{
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == name)
		{
			if (!_files[i]->IsOpened())
			{
				_files[i]->Open();
				return;
			}
			else
				throw runtime_error("File is already opened");
		}
	}
	throw runtime_error("File is not found");
}

void Directory::viewFile(string name) const
{
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == name)
		{
			_files[i]->View();
			return;
		}
	}
	throw runtime_error("File is not found");
}

void Directory::printNames() const
{
	std::cout << "Directories:\n";
	for (int i = 0; i < _directories.size(); i++)
		cout << _directories[i]->_name << std::endl;
	std::cout << "Files:\n";
	for (int i = 0; i < _files.size(); i++)
		cout << _files[i]->getName() << std::endl;
	std::cout << "Labels:\n";
	for (int i = 0; i < _labels.size(); i++)
		cout << _labels[i]->getName() << std::endl;
}

void Directory::removeFile(string name)
{
	for (int i = 0; i < _files.size(); i++)
	{
		if (_files[i]->getName() == name)
		{
			_files[i]->remove();
			_files.erase(_files.begin() + i);
			return;
		}
	}
	throw runtime_error("File is not found");
}

void Directory::removeLabel(string name)
{
	for (int i = 0; i < _labels.size(); i++)
	{
		if (_labels[i]->getName() == name)
		{
			_labels.erase(_labels.begin() + i);
			return;
		}
	}
	throw runtime_error("Label is not found");
}

void Directory::removeDirectory(string name)
{
	for (int i = 0; i < _labels.size(); i++)
	{
		if (_directories[i]->_name == name)
		{
			_directories.erase(_directories.begin() + i);
			return;
		}
	}
	throw runtime_error("Directory is not found");
}

void Directory::remove()
{
	_files.clear();
	_labels.clear();
	for (int i = 0; i < _directories.size(); i++)
		_directories[i]->remove();
	_directories.clear();
	_parent->removeDirectory(_name);
}

Directory::~Directory()
{
	_files.clear();
	_labels.clear();
	_directories.clear();
}

int main()
{
	FileManager fileManager;
	string str;
	vector<string> commands;

	while (true)
	{
		try
		{
			fileManager.showFullName();
			getline(cin, str);
			commands = split(str, ' ');
			if (commands[0] == "exit")
				break;
			if (commands[0] == "cd") 
			{
				if (commands.size() != 2)
					cout << "Incorrect operation.\n";
				fileManager.changeDirectory(commands[1]);
			}
			else if (commands[0] == "mkdir")
			{
				if (commands.size() != 2)
					cout << "Incorrect operation.\n";
				fileManager.makeDirectory(commands[1]);
				cout << "Added new directory: " << commands[1] << endl;
			}
			else if (commands[0] == "mkfile")
			{
				if (commands.size() != 2)
					cout << "Incorrect operation.\n";
				fileManager.makeFile(commands[1]);
				cout << "Added new file: " << commands[1] << endl;
			}
			else if (commands[0] == "mklabel")
			{
				if (commands.size() != 3)
					cout << "Incorrect operation.\n";
				fileManager.makeLabel(commands[1], commands[2]);
				cout << "Added new label " << commands[1] << ", pointing to " << commands[2] << endl;
			}
			else if (commands[0] == "open")
			{
				if (commands.size() != 2)
					cout << "Incorrect operation.\n";
			}
			else if (commands[0] == "write")
			{
				if (commands.size() != 1)
					cout << "Incorrect operation.\n";
			}
			else if (commands[0] == "close")
			{
				if (commands.size() != 1)
					cout << "Incorrect operation.\n";
			}
			else if (commands[0] == "rm")
			{
				if (commands.size() != 2)
					cout << "Incorrect operation.\n";
			}
			else if (commands[0] == "list")
			{
				if (commands.size() != 1)
					cout << "Incorrect operation.\n";
				fileManager.list();
			}
			else if (commands[0] == "list_r")
			{
				if (commands.size() != 1)
					cout << "Incorrect operation.\n";
			}
			else if (commands[0] == "chmod")
			{
				if (commands.size() != 2)
					cout << "Incorrect operation.\n";
			}
			else if (commands[0] == "dump")
			{
				if (commands.size() != 1)
					cout << "Incorrect operation.\n";
				fileManager.dump();
			}
			else
				cout << "Incorrect operation.\n";
		}
		catch (const exception & e)
		{
			std::cout << e.what() << std::endl;
		}
	}

	system("pause");
	return 0;
}

vector<string> &split(const string &s, char delim, vector<string> &elems)
{
	stringstream ss(s);
	string item;
	while (getline(ss, item, delim))
		elems.push_back(item);
	return elems;
}

vector<string> split(const string &s, char delim)
{
	vector<string> elems;
	split(s, delim, elems);
	return elems;
}

vector<string> ParsePath(string fullname)
{
	vector<string> names = split(fullname, '\\');
	if (names.size() == 0)
		names.push_back(fullname);
	return names;
}

void CheckName(string name)
{
	if (name.find(':') != string::npos)
		throw logic_error("Incorrect name");
}

FileItem* FileManager::findItem(vector<string> names, Directory* root, int counter)
{
	if (counter >= names.size())
		return nullptr;

	if (counter == 0)
	{
		if (root->getName() == names[0])
		{
			if (names.size() == 1)
				return root;
			counter++;
		}
		else
			return nullptr;
	}

	if (counter == names.size() - 1)
		for (int i = 0; i < root->listOfFiles().size(); i++)
			if (root->listOfFiles()[i]->getName() == names[counter])
				return root->listOfFiles()[i];

	for (int i = 0; i < root->listOfDirectories().size(); i++)
		if (root->listOfDirectories()[i]->getName() == names[counter])
		{
			if (counter == names.size() - 1)
				return root->listOfDirectories()[i];
			return FileManager::findItem(names, root->listOfDirectories()[i], ++counter);
		}

	return nullptr;
}

void FileManager::showTree(Directory* root, int counter)
{
	if (counter == 0)
		cout << root->getName() << endl;

	string tabs(counter + 1, '   ');

	for (int i = 0; i < root->listOfFiles().size(); i++)
	{
		cout << tabs << root->listOfFiles()[i]->getName() << endl;
	}

	for (int i = 0; i < root->listOfLabels().size(); i++)
	{
		cout << tabs << root->listOfLabels()[i]->getName() << endl;
	}

	for (int i = 0; i < root->listOfDirectories().size(); i++)
	{
		cout << tabs << root->listOfDirectories()[i]->getName() << endl;
		showTree(root->listOfDirectories()[i], ++counter);
	}
	return; 
}

void FileManager::remove_r(string fullname, Directory* root)
{
	findItem(ParsePath(fullname), root)->remove();
}

void FileManager::changeDirectory(string fullname)
{
	vector<string> names = ParsePath(fullname);

	if (names.size() <= 0)
		throw runtime_error("Wrong path");
	if (names.size() == 1 && !_current->get_parent())
	{
		_current = _current->findDirectory(fullname);
		return;
	}
	Directory* root;
	if (_current == _root || names[0] == _root->getName())
		root = _root;
	else
	{
		root = _current;
		names.insert(names.begin(), _current->getName());
	}

	FileItem* item = findItem(names, root);
	if (!item)
		throw runtime_error("Wrong path");
	Directory* dir = dynamic_cast<Directory*>(item);
	if (!dir)
		throw runtime_error("Invalid path");
	_current = dir;
}

void FileManager::makeDirectory(string name) const
{
	CheckName(name);
	_current->addDirectory(new Directory(name));
}

void FileManager::makeFile(string name) const
{
	CheckName(name);
	_current->addFile(new File(name));
}

void FileManager::makeLabel(string nameOfLabel, string fullNameOfRef) 
{
	CheckName(nameOfLabel);
	Label* label = new Label(nameOfLabel);
	FileItem* item = findItem(ParsePath(fullNameOfRef), _root);
	label->addReference(item);
	_current->addLabel(label);

}

void FileManager::list() const
{
	_current->printNames();
}

void FileManager::dump()
{
	showTree(_root);
}

void FileManager::showFullName() const
{
	vector<string> name;
	_current->getFullName(name);
	int i;
	for (i = 0; i < name.size() - 1; i++)
		cout << name[i] << '\\';
	cout << name[i];
	cout << ">";
}

void File::Write()
{
	int i = 0;
	string str;
	cin.ignore(numeric_limits<streamsize>::max(), '\n');
	getline(cin, str);
	while (str != "EOF")
	{
		_data.push_back(str);
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		getline(cin, str);
	}
	_isOpened = false;
}

void File::Open()
{
	if (_isOpened)
		throw runtime_error("File is already opened");
	_isOpened = true;
	View();
}

void File::View() const
{
	for (int i = 0; i < _data.size(); i++)
		cout << _data[i] << endl;
}

void Label::addReference(FileItem * item)
{
	Label* label = dynamic_cast<Label*>(item);
	if (label)
		throw runtime_error("Label cannot refer to a label");
	_item = item;
}

// LB5.cpp: определяет точку входа для консольного приложения.

#include "stdafx.h"
#include <iostream>
#include <string>
#include <vector>
#include <memory>
using namespace std;
class FileSystem
{
public:
	string name;
	//ring File_Name;
virtual	~FileSystem() {};
};
class File : public FileSystem 
{
public:
	File() {};
	File(string file_name) { name= file_name; }
	~File() {};
};
class Directory : public FileSystem
{
	vector < shared_ptr<FileSystem> >Files;

public:
	Directory(string name_) { name = name_; };
//create
	
	void addFile(shared_ptr<File>& file) 
	{
		Files.push_back(dynamic_pointer_cast<FileSystem>(file));
	}
	void addDir(shared_ptr<Directory>&file) 
	{
		Files.push_back(dynamic_pointer_cast<FileSystem>(file));
	}
	//finding file
	vector<shared_ptr<FileSystem>> Find_File(string filename)
	{
		int a=0;
		vector<shared_ptr<FileSystem>> finder;
		for (auto i = Files.begin(); i != Files.end(); ++i)
		{
			if ((*i)->name == filename)
			{
				finder.push_back(*i);
				a++;
			}
		}
		for (int j = 0; j< a; j++) 
		{
			cout << finder[j]->name;
			
		}
		if (a == 0) { cout << "File wasn't found"<<endl; }
		return finder;
	}
	//delete
       void  Delete_File(string filename)
	{
	 for (auto i = Files.begin(); i != Files.end(); ++i) 
             {
               if ((*i)->name == filename) 
                      {
                               Files.erase(i);
                               break;
                                 cout <<"\n"<< "File was deleted" << endl;
                 	}
	   //file's content
	   void FileContent(string filename)
	   {
		   vector<shared_ptr<FileSystem>>content = Find_File(filename);
		   for (auto i = content.begin(); i != content.end(); ++i)
		   {
			   cout << *i<<" ";
			  
		   }
		   cout << endl;
	   }
	 //copy
	   void FileCopy(string filename)
	   {
		   shared_ptr <File> file(new File(filename));
		   addFile(file);
		   FileContent(filename);
		   cout << "Copy excists"<<endl;
	   }
	
};

int main()
{
 //	setlocale(LC_ALL, "rus");
	
	shared_ptr<Directory> directory1(new Directory("first one"));
	cout << "Repository #1 was created"<<endl;
	shared_ptr <File> file1(new File("my file1"));
	directory1->addFile(file1);
	cout << "File was added"<<endl;
	
	shared_ptr<Directory> directory2(new Directory("second one"));
	cout << "Repository #2 was created" << endl;
	shared_ptr <File> file2( new File("my file2"));
	cout << "Content" << endl;

	shared_ptr<File> file3(new File("my file3"));	
		directory2->addFile(file2);
		cout << "File 2  was added" << endl;
		directory2->addFile(file3);
		cout << "File 3 was added" << endl;
	    directory2->Find_File("my file3");
		directory2->Delete_File("my file2");
		directory1->FileContent("my file1");
		directory1->FileCopy("my file1");
    return 0;
}

